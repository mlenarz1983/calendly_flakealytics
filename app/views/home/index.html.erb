<div class='header'>
    <div class='user-info'>
        <% if @user %>
            <img src="<%= @user.avatar_url %>" class="user-icon" />
            
            <div class="user-fullname"><%= @user.first_name %> <%= @user.last_name %></div>
            <br/>
            <div class="user-email"><%= @user.email_address %></div>
        <% end %>
    </div>

    <h1 class='title'>Calendly Flake-alytics</h1>
    <h3 class='subtitle'>Who's flaking on your meetings?</h3>


</div>

<div class='content'>
    <div id="loading-indicator" style="display: none">
        loading...
    </div>

    <div id="zero-state" style="display: none">
        No users found.  <a class='add-user-button' href='#'>Add one</a>
    </div>

    <div id="new-user-dashboard" style="display: none">
        <p>Success!  User added</p>
        <p>We're listening for flaky-ness.  Check back in a bit for your dashboard.</p> 
    </div>

    <div id="dashboard" style="display: none">
        <div class="first-column">
            <div style="width:100%;" class='date-chart-container'>
                <canvas id="date-canvas"></canvas>
            </div>
        </div>

        <div class="second-column">
            <div style="width:100%;" class='event-type-chart-container'>
                <canvas id="event-type-canvas"></canvas>
            </div>

            <div style="width:100%;" class='email-chart-container'>
                <canvas id="email-canvas"></canvas>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    
    window.calendly = window.calendly || {};
    window.calendly.availableColors = ['#0267c1', '#efa00b',  '#d65108', '#591f0a', '#0075c4'];

    function refreshFlakesByEmailChart(flakesByEmail) {
        //todo: clean old chart

        var counts = [];
        var chartColors = [];
        var chartLabels = [];

        for (var i=0; i<flakesByEmail.length; i++) {
            var row = flakesByEmail[i],
                emailProvider = row['emailProvider'],
                emailCount = row['count'];
            chartColors.push(window.calendly.availableColors[chartLabels.length % window.calendly.availableColors.length]); // cycle colors
            counts.push(emailCount);
            chartLabels.push(emailProvider);
        }

        var config = {
            type: 'pie',
            data: {
                datasets: [{
                    data: counts,
                    backgroundColor: chartColors
                }],
                labels: chartLabels
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'By Email'
                },
                legend: {
                    display: false
                }
            }
        };

        var ctx = document.getElementById('email-canvas').getContext('2d');
        window.byEmailChart = new Chart(ctx, config);
    }

    function refreshFlakesByEventTypeChart(flakesByDate) {
        //todo: clean old chart

        var eventTypeCounts = [];
        var chartColors = [];
        var chartLabels = [];

        // for speed of developement, I'm co-opting the flakesByDate endpoint.  in a real-world app, I
        // would consider creating a dedicated endpoint for performance reasons.  there's a  
        // trade-off, though: it would be a separate database query... BUT if cacheing were introduced,
        // that small cost would quickly be amortized.

        for (var eventType in flakesByDate) {
            if (flakesByDate.hasOwnProperty(eventType)) { 
                var totalFlakes = 0;
                for (var i=0; i<flakesByDate[eventType].length; i++) {
                    totalFlakes += flakesByDate[eventType][i]['count'];
                }

                chartColors.push(window.calendly.availableColors[chartLabels.length % window.calendly.availableColors.length]); // cycle colors
                eventTypeCounts.push(totalFlakes);
                chartLabels.push(eventType);
            }
        }

        var config = {
            type: 'pie',
            data: {
                datasets: [{
                    data: eventTypeCounts,
                    backgroundColor: chartColors
                }],
                labels: chartLabels
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'By Event Type'
                },
                legend: {
                    display: false
                }
            }
        };

        var ctx = document.getElementById('event-type-canvas').getContext('2d');
        window.byEventTypeChart = new Chart(ctx, config);
    }

    function refreshFlakesByDateChart(flakesByDate) {
        //todo: clean old chart

        var dateLabels = [];

        // gracefully handle situation where there are no event types / stats
        if (Object.keys(flakesByDate).length > 1) {
            // the flakesByDate will always have the same keys across each of the event types.  i.e. the dates
            // from the first event type will always match the dates from additional event types.
            for (var i=0; i<flakesByDate[Object.keys(flakesByDate)[0]].length; i++) {
                dateLabels.push(flakesByDate[Object.keys(flakesByDate)[0]][i]['date']);
            }
        }

        var datasets = [];
        for (var eventType in flakesByDate) {
            if (flakesByDate.hasOwnProperty(eventType)) { 
                var dataset = {
                    label: eventType,
                    backgroundColor: window.calendly.availableColors[datasets.length % window.calendly.availableColors.length], // cycle colors
                    borderColor: window.calendly.availableColors[datasets.length % window.calendly.availableColors.length], // cycle colors
                    fill: false,
                    data: [],
                    lineTension: 0 // don't interpolate
                };
                for (var i=0; i<flakesByDate[eventType].length; i++) {
                    dataset['data'].push(flakesByDate[eventType][i]['count']);     
                }
                datasets.push(dataset);
            }
        }

        var config = {
            type: 'line',
            data: {
                labels: dateLabels,
                datasets: datasets
            },
            options: {
                responsive: true,
                title: {
                    display: false,
                    text: 'By Date'
                },
                legend: {
                    display: false
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Date'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Cancellations'
                        }
                    }]
                }
            }
        };

        var ctx = document.getElementById('date-canvas').getContext('2d');
        window.byDateChart = new Chart(ctx, config);
    }

    function queryAndRefreshStats(userId) {
        var loadingIndicator = document.getElementById("loading-indicator");
        var dashboard = document.getElementById("dashboard");

        loadingIndicator.style.display = "block";
        dashboard.style.display = "none";

        // in a real-world application, the ajax API would be either jQuery or something baked into angular/react
        var xhr = new XMLHttpRequest();
        xhr.open('GET', 'stats/' + userId);
        xhr.onload = function() {
            if (xhr.status === 200) {
                var stats = JSON.parse(xhr.responseText);

                refreshFlakesByDateChart(stats.timeStats);
                refreshFlakesByEventTypeChart(stats.timeStats);
                refreshFlakesByEmailChart(stats.emailStats);
            }
            else {
                //todo: graceful error message
            }

            loadingIndicator.style.display = "none";
            dashboard.style.display = "block";
        };
        xhr.send();
    }

    function addUser() {
        // normally, this would be a nice-looking dialog which would:
        // - explain where the user could get their key (optionally with a link or screenshot of what this page looks like)
        // - have validation checking for a value and the expected length
        // - make a client-side curl call to Calendly's API so that the user could get immediate feedback on whether their key exists
        var apiKey = window.prompt('Enter the API key from your Calendly account.');
        if (apiKey) {
            // in a real-world application, the ajax API would be either jQuery or something baked into angular/react
            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'users');
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onload = function() {
                if (xhr.status === 200) {
                    var newUser = JSON.parse(xhr.responseText);
                    // queryAndRefreshStats(newUser.id);
                    var zeroState = document.getElementById('zero-state');
                    var newUserDashboard = document.getElementById('new-user-dashboard');
                    zeroState.style.display = "none";
                    newUserDashboard.style.display = "block";
                }
                else {
                    //todo: graceful error message
                }
            };
            xhr.send(encodeURI('api_key=' + apiKey));
        }
    }

    window.onload = function() {
        <% if @user %>
            queryAndRefreshStats(<%= @user.id %>);
        <% else %>
            var zeroState = document.getElementById("zero-state");
            zeroState.style.display = "block";
        <% end %>

        var addUserButtons = document.getElementsByClassName('add-user-button');
        for (var i=0; i<addUserButtons.length; i++) {
            addUserButtons[i].onclick=function() {addUser(); return false; }
        }
    };

</script>
